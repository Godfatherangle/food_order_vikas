{"ast":null,"code":"import { sample_foods, sample_tags } from 'src/data';\n// import { FOODS_BY_SEARCH_URL, FOODS_BY_TAG_URL, FOODS_TAGS_URL, FOODS_URL, FOOD_BY_ID_URL } from '../shared/constants/urls';\nimport { Food } from '../shared/models/Food';\nimport * as i0 from \"@angular/core\";\nexport class FoodService {\n  constructor() {}\n  getAll() {\n    return sample_foods;\n  }\n  getAllFoodsBySearchTerm(searchTerm) {\n    return this.getAll().filter(food => food.name.toLowerCase().includes(searchTerm.toLowerCase()));\n  }\n  getAllTags() {\n    return sample_tags;\n  }\n  getAllFoodsByTag(tag) {\n    return tag === \"All\" ? this.getAll() : this.getAll().filter(food => food.tags?.includes(tag));\n  }\n  getFoodById(foodId) {\n    return this.getAll().find(food => food.id === foodId) ?? new Food();\n  }\n  static #_ = this.ɵfac = function FoodService_Factory(t) {\n    return new (t || FoodService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FoodService,\n    factory: FoodService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["sample_foods","sample_tags","Food","FoodService","constructor","getAll","getAllFoodsBySearchTerm","searchTerm","filter","food","name","toLowerCase","includes","getAllTags","getAllFoodsByTag","tag","tags","getFoodById","foodId","find","id","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/sam/Downloads/public/project/src/app/services/food.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { sample_foods, sample_tags } from 'src/data';\n// import { FOODS_BY_SEARCH_URL, FOODS_BY_TAG_URL, FOODS_TAGS_URL, FOODS_URL, FOOD_BY_ID_URL } from '../shared/constants/urls';\nimport { Food } from '../shared/models/Food';\nimport { Tag } from '../shared/models/Tag';\n\n@Injectable({ \n  providedIn: 'root'\n})\nexport class FoodService {\n  \n  constructor(){}\n  getAll(): Food[] {\n    return sample_foods\n  }\n\n\ngetAllFoodsBySearchTerm(searchTerm: string) {\n  return this.getAll().filter(food => food.name.toLowerCase().includes(searchTerm.toLowerCase()))\n}\n  \ngetAllTags():Tag[]{\n\n  return sample_tags\n}\n\ngetAllFoodsByTag(tag:string): Food[]{\n  return tag === \"All\" ?\n  this.getAll():\n  this.getAll().filter(food => food.tags?.includes(tag))\n}\ngetFoodById(foodId:string):Food{\n  return this.getAll().find(food => food.id === foodId) ?? new Food()\n}\n}"],"mappings":"AAEA,SAASA,YAAY,EAAEC,WAAW,QAAQ,UAAU;AACpD;AACA,SAASC,IAAI,QAAQ,uBAAuB;;AAM5C,OAAM,MAAOC,WAAW;EAEtBC,YAAA,GAAc;EACdC,MAAMA,CAAA;IACJ,OAAOL,YAAY;EACrB;EAGFM,uBAAuBA,CAACC,UAAkB;IACxC,OAAO,IAAI,CAACF,MAAM,EAAE,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACL,UAAU,CAACI,WAAW,EAAE,CAAC,CAAC;EACjG;EAEAE,UAAUA,CAAA;IAER,OAAOZ,WAAW;EACpB;EAEAa,gBAAgBA,CAACC,GAAU;IACzB,OAAOA,GAAG,KAAK,KAAK,GACpB,IAAI,CAACV,MAAM,EAAE,GACb,IAAI,CAACA,MAAM,EAAE,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACO,IAAI,EAAEJ,QAAQ,CAACG,GAAG,CAAC,CAAC;EACxD;EACAE,WAAWA,CAACC,MAAa;IACvB,OAAO,IAAI,CAACb,MAAM,EAAE,CAACc,IAAI,CAACV,IAAI,IAAIA,IAAI,CAACW,EAAE,KAAKF,MAAM,CAAC,IAAI,IAAIhB,IAAI,EAAE;EACrE;EAAC,QAAAmB,CAAA,G;qBAxBYlB,WAAW;EAAA;EAAA,QAAAmB,EAAA,G;WAAXnB,WAAW;IAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}